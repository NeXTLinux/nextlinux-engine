#!/usr/bin/env bash

set -euvo pipefail

COMMIT_SHA="${1:?'Missing required parameter: COMMIT_SHA'}"
GIT_TAG="${2:?'Missing required parameter: GIT_TAG'}"
TEST_IMAGE_NAME="${3:?'Missing required parameter: TEST_IMAGE_NAME'}"
CLI_REPO="${4:?'Missing required parameter: CLI_REPO'}"

# Optional - only used for print_colorized
source nextlinux-ci/utils

# Get the latest nextlinux-cli tag from remote
if [[ "${GIT_TAG}" =~ ^v[0-9]+(\.[0-9]+)*.*$ ]]; then
    nextlinux_cli_commit="$(git -c 'versionsort.suffix=-' ls-remote --exit-code --tags --refs --sort="v:refname" ${CLI_REPO} 'v*' | tail -n1 | sed 's/.*\///')"
# Or, get commit SHA from HEAD of master nextlinux-cli remote
else
    nextlinux_cli_commit="$(git ls-remote ${CLI_REPO} master | cut -f 1)"
fi

<<<<<<< HEAD
print_colorized INFO "Building Anchore Engine image ${TEST_IMAGE_NAME}; installing nextlinux-cli from git@${nextlinux_cli_commit}."; echo
=======
print_colorized INFO "Building Nextlinux Engine image ${TEST_IMAGE_NAME}; installing nextlinux-cli from git@${nextlinux_cli_commit}."; echo
>>>>>>> master

if [[ ${CI:-false} == "true" ]]; then
  BUILD_CACHE_ARG="--no-cache"
else
  BUILD_CACHE_ARG=""
fi

<<<<<<< HEAD
docker build ${BUILD_CACHE_ARG} --build-arg ANCHORE_COMMIT="${COMMIT_SHA}" --build-arg CLI_COMMIT="${nextlinux_cli_commit}" -t "${TEST_IMAGE_NAME}" -f ./Dockerfile .
=======
docker build ${BUILD_CACHE_ARG} --build-arg NEXTLINUX_COMMIT="${COMMIT_SHA}" --build-arg CLI_COMMIT="${nextlinux_cli_commit}" -t "${TEST_IMAGE_NAME}" -f ./Dockerfile .
>>>>>>> master

print_colorized INFO "Built Nextlinux Engine image ${TEST_IMAGE_NAME}."; echo
